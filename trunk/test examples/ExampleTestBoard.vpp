class TestBoard is subclass of Test

instance variables

    private board: Board := new Board();

operations

    public testValidInitialBoard() == (
        assertTrue(board.validBackLine(<Black>));
        assertTrue(board.validFrontLine(<Black>));
        assertTrue(board.validFrontLine(<White>));
        assertTrue(board.validBackLine(<White>));
        for y = 3 to 6 do
            for x = 1 to 8 do
                assertFalse(board.hasStack(new Position(x,y)));
    );

    public testAddStack() == (
        dcl p: Position := new Position(5, 5);
        dcl s: Stack := new Stack(new CirclePiece(<Black>));
        assertFalse(board.hasStack(p));
        board.addStack(p, s);
        assertTrue(board.hasStack(p));
        assertTrue(board.getStack(p) = s);
    );

    public testMove() == (
        dcl p1: Position := new Position(1, 2);
        dcl p2: Position := new Position(1, 3);
        dcl s: Stack;

        assertTrue(board.hasStack(p1));
        s := board.getStack(p1);
        assertTrue(len s.getPieces() = 1);
        assertTrue(s.getTop().getColor() = <Black>);
        assertFalse(board.hasStack(p2));
        assertTrue(board.validMove(p1, p2));
        assertFalse(board.validMove(p2, p1));
        
        board.move(p1, p2);

        assertFalse(board.hasStack(p1));
        assertTrue(board.hasStack(p2));
        assertTrue(board.getStack(p2) = s);
    );

    public testMoveCapture() == (
        dcl p1: Position := new Position(1, 2);
        dcl p2: Position := new Position(1, 3);
        dcl s: Stack;

        assertTrue(board.hasStack(p1));
        s := board.getStack(p1);
        assertTrue(len s.getPieces() = 1);
        assertTrue(s.getTop().getColor() = <Black>);
        assertFalse(board.hasStack(p2));
        
        board.addStack(p2, new Stack(new CirclePiece(<White>)));
        assertTrue(board.hasStack(p2));

        assertTrue(board.validMove(p1, p2));

        board.move(p1, p2);

        assertFalse(board.hasStack(p1));
        assertTrue(board.hasStack(p2));
        assertTrue(board.getStack(p2) = s);
        assertTrue(len s.getPieces() = 2);
        assertTrue(s.getTop().getColor() = <Black>);
    );

    public testMoveJump() == (
        dcl p1: Position := new Position(2, 1);
        dcl p2: Position := new Position(2, 3);
        dcl p3: Position := new Position(2, 2);
        dcl s: Stack;

        assertTrue(board.hasStack(p1));
        s := board.getStack(p1);
        s.append(new Stack(new CirclePiece(<White>)));
        assertTrue(len s.getPieces() = 2);
        assertTrue(s.getTop().getColor() = <Black>);
        assertTrue(board.hasStack(p3));
        assertFalse(board.hasStack(p2));
        assertFalse(board.validMove(p1, p2));
    );

end TestBoard
