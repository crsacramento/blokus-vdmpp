//
// THIS FILE IS AUTOMATICALLY GENERATED!!
//
// Generated at 2012-12-07 by the VDM++ to JAVA Code Generator
// (v8.1.1b - Thu 30-Oct-2008 14:59:38)
//
// Supported compilers: jdk 1.4/1.5/1.6
//

// ***** VDMTOOLS START Name=HeaderComment KEEP=NO
// ***** VDMTOOLS END Name=HeaderComment

// ***** VDMTOOLS START Name=package KEEP=NO
// ***** VDMTOOLS END Name=package

// ***** VDMTOOLS START Name=imports KEEP=NO

import jp.co.csk.vdm.toolbox.VDM.*;
import java.util.*;
import jp.co.csk.vdm.toolbox.VDM.jdk.*;
// ***** VDMTOOLS END Name=imports



public class Board implements EvaluatePP {

// ***** VDMTOOLS START Name=vdmComp KEEP=NO
  static UTIL.VDMCompare vdmComp = new UTIL.VDMCompare();
// ***** VDMTOOLS END Name=vdmComp

// ***** VDMTOOLS START Name=board KEEP=NO
  public volatile HashMap board = new HashMap();
// ***** VDMTOOLS END Name=board

// ***** VDMTOOLS START Name=sentinel KEEP=NO
  volatile Sentinel sentinel;
// ***** VDMTOOLS END Name=sentinel


// ***** VDMTOOLS START Name=BoardSentinel KEEP=NO
  class BoardSentinel extends Sentinel {

    public final int Board = 0;

    public final int drawPiece = 1;

    public final int resetBoard = 2;

    public final int validCorner = 3;

    public final int doesPieceFit = 4;

    public final int getEmptyCoords = 5;

    public final int isPieceInCorner = 6;

    public final int isPieceOutOfBounds = 7;

    public final int doesPieceTouchCorner = 8;

    public final int returnPieceCoordsInBoard = 9;

    public final int doesPieceTouchSameColorOnSides = 10;

    public final int nr_functions = 11;


    public BoardSentinel () throws CGException {}


    public BoardSentinel (EvaluatePP instance) throws CGException {
      init(nr_functions, instance);
    }

  }
// ***** VDMTOOLS END Name=BoardSentinel
;

// ***** VDMTOOLS START Name=evaluatePP#1|int KEEP=NO
  public Boolean evaluatePP (int fnr) throws CGException {
    return new Boolean(true);
  }
// ***** VDMTOOLS END Name=evaluatePP#1|int


// ***** VDMTOOLS START Name=setSentinel KEEP=NO
  public void setSentinel () {
    try {
      sentinel = new BoardSentinel(this);
    }
    catch (CGException e) {
      System.out.println(e.getMessage());
    }
  }
// ***** VDMTOOLS END Name=setSentinel

// ***** VDMTOOLS START Name=BOARD_uSIZE KEEP=NO
  private static final Integer BOARD_uSIZE = new Integer(20);
// ***** VDMTOOLS END Name=BOARD_uSIZE


// ***** VDMTOOLS START Name=vdm_init_Board KEEP=NO
  private void vdm_init_Board () throws CGException {
    try {

      setSentinel();
      board = new HashMap();
    }
    catch (Exception e){

      e.printStackTrace(System.out);
      System.out.println(e.getMessage());
    }
  }
// ***** VDMTOOLS END Name=vdm_init_Board


// ***** VDMTOOLS START Name=Board KEEP=NO
  public Board () throws CGException {
    try {

      vdm_init_Board();
      resetBoard();
      setSentinel();
    }
    catch (Throwable e) {
      System.out.println(e.getMessage());
    }
  }
// ***** VDMTOOLS END Name=Board


// ***** VDMTOOLS START Name=resetBoard KEEP=NO
  public void resetBoard () throws CGException {

    sentinel.entering(((BoardSentinel) sentinel).resetBoard);
    try {

      Piece.Coord c = null;
      {

        HashSet iset_1 = new HashSet();
        iset_1 = new HashSet();
        int ubi_11 = BOARD_uSIZE.intValue();
        for (int count_12 = new Integer(1).intValue(); count_12 <= ubi_11; count_12++) 
          iset_1.add(new Integer(count_12));
        Integer i = null;
        for (Iterator enm_32 = iset_1.iterator(); enm_32.hasNext(); ) {

          Integer elem_2 = UTIL.NumberToInt(enm_32.next());
          i = elem_2;
          {

            HashSet iset_13 = new HashSet();
            iset_13 = new HashSet();
            int ubi_23 = BOARD_uSIZE.intValue();
            for (int count_24 = new Integer(1).intValue(); count_24 <= ubi_23; count_24++) 
              iset_13.add(new Integer(count_24));
            Integer j = null;
            for (Iterator enm_31 = iset_13.iterator(); enm_31.hasNext(); ) {

              Integer elem_14 = UTIL.NumberToInt(enm_31.next());
              j = elem_14;
              {

                Piece.Coord rhs_25 = null;
                rhs_25 = new Piece.Coord(UTIL.NumberToReal(i), UTIL.NumberToReal(j));
                c = (Piece.Coord) UTIL.clone(rhs_25);
                board.put(c, new quotes.NONE());
              }
            }
          }
        }
      }
    }
    finally {
      sentinel.leaving(((BoardSentinel) sentinel).resetBoard);
    }
  }
// ***** VDMTOOLS END Name=resetBoard


// ***** VDMTOOLS START Name=doesPieceFit#2|Piece KEEP=NO
  public Boolean doesPieceFit (final Piece piece, final Piece.Coord start_ucoord) throws CGException {

    if (!this.pre_doesPieceFit(piece, start_ucoord).booleanValue()) 
      UTIL.RunTime("Run-Time Error:Precondition failure in doesPieceFit");
    sentinel.entering(((BoardSentinel) sentinel).doesPieceFit);
    try {

      Integer i = new Integer(1);
      Boolean b = new Boolean(true);
      Vector coords = null;
      HashMap tmp_m_3 = new HashMap();
      tmp_m_3 = piece.getPositionsToDraw();
      Object tmppar_4 = null;
      tmppar_4 = piece.getCurrDirection();
      coords = (Vector) UTIL.ConvertToList(tmp_m_3.get(tmppar_4));
      Piece.Coord coord = null;
      while ( new Boolean((i.intValue()) <= (new Integer(coords.size()).intValue())).booleanValue()){

        Piece.Coord rhs_9 = null;
        Double tmpVar_10 = null;
        Double var1_11 = null;
        var1_11 = (start_ucoord).x;
        Double var2_13 = null;
        Piece.Coord tmpRec_14 = null;
        if ((1 <= i.intValue()) && (i.intValue() <= coords.size())) 
          tmpRec_14 = (Piece.Coord) coords.get(i.intValue() - 1);
        else 
          UTIL.RunTime("Run-Time Error:Illegal index");
        var2_13 = (tmpRec_14).x;
        tmpVar_10 = new Double(var1_11.doubleValue() + var2_13.doubleValue());
        Double tmpVar_17 = null;
        Double var1_18 = null;
        var1_18 = (start_ucoord).y;
        Double var2_20 = null;
        Piece.Coord tmpRec_21 = null;
        if ((1 <= i.intValue()) && (i.intValue() <= coords.size())) 
          tmpRec_21 = (Piece.Coord) coords.get(i.intValue() - 1);
        else 
          UTIL.RunTime("Run-Time Error:Illegal index");
        var2_20 = (tmpRec_21).y;
        tmpVar_17 = new Double(var1_18.doubleValue() + var2_20.doubleValue());
        rhs_9 = new Piece.Coord(tmpVar_10, tmpVar_17);
        coord = (Piece.Coord) UTIL.clone(rhs_9);
        Boolean cond_24 = null;
        cond_24 = new Boolean(board.containsKey(coord));
        if (cond_24.booleanValue()) {
          if (new Boolean(!UTIL.equals(board.get(coord), new quotes.NONE())).booleanValue()) 
            b = (Boolean) UTIL.clone(new Boolean(false));
        }
        i = UTIL.NumberToInt(UTIL.clone(new Integer(i.intValue() + new Integer(1).intValue())));
      }
      return b;
    }
    finally {
      sentinel.leaving(((BoardSentinel) sentinel).doesPieceFit);
    }
  }
// ***** VDMTOOLS END Name=doesPieceFit#2|Piece


// ***** VDMTOOLS START Name=pre_doesPieceFit#2|Piece KEEP=NO
  public Boolean pre_doesPieceFit (final Piece piece, final Piece.Coord start_ucoord) throws CGException {

    Boolean varRes_3 = null;
    Boolean var1_4 = null;
    Boolean var1_5 = null;
    Boolean var1_6 = null;
    Boolean var1_7 = null;
    Double var1_8 = null;
    var1_8 = (start_ucoord).x;
    var1_7 = new Boolean((var1_8.doubleValue()) > (new Integer(0).intValue()));
    {
      if ((var1_6 = var1_7).booleanValue()) {

        Boolean var2_11 = null;
        Double var1_12 = null;
        var1_12 = (start_ucoord).y;
        var2_11 = new Boolean((var1_12.doubleValue()) > (new Integer(0).intValue()));
        var1_6 = var2_11;
      }
    }
    {
      if ((var1_5 = var1_6).booleanValue()) {

        Boolean var2_15 = null;
        Double var1_16 = null;
        var1_16 = (start_ucoord).x;
        var2_15 = new Boolean((var1_16.doubleValue()) < (BOARD_uSIZE.intValue()));
        var1_5 = var2_15;
      }
    }
    {
      if ((var1_4 = var1_5).booleanValue()) {

        Boolean var2_19 = null;
        Double var1_20 = null;
        var1_20 = (start_ucoord).y;
        var2_19 = new Boolean((var1_20.doubleValue()) < (BOARD_uSIZE.intValue()));
        var1_4 = var2_19;
      }
    }
    {
      if ((varRes_3 = var1_4).booleanValue()) {

        Boolean var2_23 = null;
        Object var1_24 = null;
        var1_24 = piece.getCurrDirection();
        HashMap var2_25 = new HashMap();
        var2_25 = piece.getPositionsToDraw();
        var2_23 = new Boolean(var2_25.containsKey(var1_24));
        varRes_3 = var2_23;
      }
    }
    return varRes_3;
  }
// ***** VDMTOOLS END Name=pre_doesPieceFit#2|Piece


// ***** VDMTOOLS START Name=isPieceInCorner#2|Piece KEEP=NO
  public Boolean isPieceInCorner (final Piece piece, final Piece.Coord start_ucoord) throws CGException {

    sentinel.entering(((BoardSentinel) sentinel).isPieceInCorner);
    try {

      Integer i = new Integer(1);
      Boolean b = new Boolean(false);
      Vector corners = null;
      Piece.Coord e_seq_3 = null;
      e_seq_3 = new Piece.Coord(UTIL.NumberToReal(new Integer(1)), UTIL.NumberToReal(new Integer(1)));
      corners = new Vector();
      corners.add(e_seq_3);
      Piece.Coord e_seq_6 = null;
      e_seq_6 = new Piece.Coord(UTIL.NumberToReal(new Integer(20)), UTIL.NumberToReal(new Integer(1)));
      corners.add(e_seq_6);
      Piece.Coord e_seq_9 = null;
      e_seq_9 = new Piece.Coord(UTIL.NumberToReal(new Integer(20)), UTIL.NumberToReal(new Integer(20)));
      corners.add(e_seq_9);
      Piece.Coord e_seq_12 = null;
      e_seq_12 = new Piece.Coord(UTIL.NumberToReal(new Integer(1)), UTIL.NumberToReal(new Integer(20)));
      corners.add(e_seq_12);
      Vector coordsInBoard = returnPieceCoordsInBoard((Piece) piece, start_ucoord);
      while ( new Boolean((i.intValue()) <= (new Integer(coordsInBoard.size()).intValue())).booleanValue()){

        Boolean cond_21 = null;
        Boolean var1_22 = null;
        Boolean var1_23 = null;
        Boolean var1_24 = null;
        Piece.Coord var1_25 = null;
        if ((1 <= new Integer(1).intValue()) && (new Integer(1).intValue() <= corners.size())) 
          var1_25 = (Piece.Coord) corners.get(new Integer(1).intValue() - 1);
        else 
          UTIL.RunTime("Run-Time Error:Illegal index");
        Piece.Coord var2_28 = null;
        if ((1 <= i.intValue()) && (i.intValue() <= coordsInBoard.size())) 
          var2_28 = (Piece.Coord) coordsInBoard.get(i.intValue() - 1);
        else 
          UTIL.RunTime("Run-Time Error:Illegal index");
        var1_24 = new Boolean(UTIL.equals(var1_25, var2_28));
        {
          if (!(var1_23 = var1_24).booleanValue()) {

            Boolean var2_31 = null;
            Piece.Coord var1_32 = null;
            if ((1 <= new Integer(2).intValue()) && (new Integer(2).intValue() <= corners.size())) 
              var1_32 = (Piece.Coord) corners.get(new Integer(2).intValue() - 1);
            else 
              UTIL.RunTime("Run-Time Error:Illegal index");
            Piece.Coord var2_35 = null;
            if ((1 <= i.intValue()) && (i.intValue() <= coordsInBoard.size())) 
              var2_35 = (Piece.Coord) coordsInBoard.get(i.intValue() - 1);
            else 
              UTIL.RunTime("Run-Time Error:Illegal index");
            var2_31 = new Boolean(UTIL.equals(var1_32, var2_35));
            var1_23 = var2_31;
          }
        }
        {
          if (!(var1_22 = var1_23).booleanValue()) {

            Boolean var2_38 = null;
            Piece.Coord var1_39 = null;
            if ((1 <= new Integer(3).intValue()) && (new Integer(3).intValue() <= corners.size())) 
              var1_39 = (Piece.Coord) corners.get(new Integer(3).intValue() - 1);
            else 
              UTIL.RunTime("Run-Time Error:Illegal index");
            Piece.Coord var2_42 = null;
            if ((1 <= i.intValue()) && (i.intValue() <= coordsInBoard.size())) 
              var2_42 = (Piece.Coord) coordsInBoard.get(i.intValue() - 1);
            else 
              UTIL.RunTime("Run-Time Error:Illegal index");
            var2_38 = new Boolean(UTIL.equals(var1_39, var2_42));
            var1_22 = var2_38;
          }
        }
        {
          if (!(cond_21 = var1_22).booleanValue()) {

            Boolean var2_45 = null;
            Piece.Coord var1_46 = null;
            if ((1 <= new Integer(4).intValue()) && (new Integer(4).intValue() <= corners.size())) 
              var1_46 = (Piece.Coord) corners.get(new Integer(4).intValue() - 1);
            else 
              UTIL.RunTime("Run-Time Error:Illegal index");
            Piece.Coord var2_49 = null;
            if ((1 <= i.intValue()) && (i.intValue() <= coordsInBoard.size())) 
              var2_49 = (Piece.Coord) coordsInBoard.get(i.intValue() - 1);
            else 
              UTIL.RunTime("Run-Time Error:Illegal index");
            var2_45 = new Boolean(UTIL.equals(var1_46, var2_49));
            cond_21 = var2_45;
          }
        }
        if (cond_21.booleanValue()) 
          b = (Boolean) UTIL.clone(new Boolean(true));
        i = UTIL.NumberToInt(UTIL.clone(new Integer(i.intValue() + new Integer(1).intValue())));
      }
      return b;
    }
    finally {
      sentinel.leaving(((BoardSentinel) sentinel).isPieceInCorner);
    }
  }
// ***** VDMTOOLS END Name=isPieceInCorner#2|Piece


// ***** VDMTOOLS START Name=isPieceOutOfBounds#2|Piece KEEP=NO
  public Boolean isPieceOutOfBounds (final Piece piece, final Piece.Coord start_ucoord) throws CGException {

    if (!this.pre_isPieceOutOfBounds(piece, start_ucoord).booleanValue()) 
      UTIL.RunTime("Run-Time Error:Precondition failure in isPieceOutOfBounds");
    sentinel.entering(((BoardSentinel) sentinel).isPieceOutOfBounds);
    try {

      Integer i = new Integer(1);
      Boolean b = new Boolean(false);
      Vector coords = null;
      HashMap tmp_m_3 = new HashMap();
      tmp_m_3 = piece.getPositionsToDraw();
      Object tmppar_4 = null;
      tmppar_4 = piece.getCurrDirection();
      coords = (Vector) UTIL.ConvertToList(tmp_m_3.get(tmppar_4));
      Piece.Coord coord = null;
      while ( new Boolean((i.intValue()) <= (new Integer(coords.size()).intValue())).booleanValue()){

        Piece.Coord rhs_9 = null;
        Double tmpVar_10 = null;
        Double var1_11 = null;
        var1_11 = (start_ucoord).x;
        Double var2_13 = null;
        Piece.Coord tmpRec_14 = null;
        if ((1 <= i.intValue()) && (i.intValue() <= coords.size())) 
          tmpRec_14 = (Piece.Coord) coords.get(i.intValue() - 1);
        else 
          UTIL.RunTime("Run-Time Error:Illegal index");
        var2_13 = (tmpRec_14).x;
        tmpVar_10 = new Double(var1_11.doubleValue() + var2_13.doubleValue());
        Double tmpVar_17 = null;
        Double var1_18 = null;
        var1_18 = (start_ucoord).y;
        Double var2_20 = null;
        Piece.Coord tmpRec_21 = null;
        if ((1 <= i.intValue()) && (i.intValue() <= coords.size())) 
          tmpRec_21 = (Piece.Coord) coords.get(i.intValue() - 1);
        else 
          UTIL.RunTime("Run-Time Error:Illegal index");
        var2_20 = (tmpRec_21).y;
        tmpVar_17 = new Double(var1_18.doubleValue() + var2_20.doubleValue());
        rhs_9 = new Piece.Coord(tmpVar_10, tmpVar_17);
        coord = (Piece.Coord) UTIL.clone(rhs_9);
        Boolean cond_24 = null;
        Boolean var1_25 = null;
        Boolean var1_26 = null;
        Boolean var1_27 = null;
        Double var1_28 = null;
        var1_28 = (coord).x;
        var1_27 = new Boolean((var1_28.doubleValue()) < (new Integer(1).intValue()));
        {
          if (!(var1_26 = var1_27).booleanValue()) {

            Boolean var2_31 = null;
            Double var1_32 = null;
            var1_32 = (coord).x;
            var2_31 = new Boolean((var1_32.doubleValue()) > (BOARD_uSIZE.intValue()));
            var1_26 = var2_31;
          }
        }
        {
          if (!(var1_25 = var1_26).booleanValue()) {

            Boolean var2_35 = null;
            Double var1_36 = null;
            var1_36 = (coord).y;
            var2_35 = new Boolean((var1_36.doubleValue()) < (new Integer(1).intValue()));
            var1_25 = var2_35;
          }
        }
        {
          if (!(cond_24 = var1_25).booleanValue()) {

            Boolean var2_39 = null;
            Double var1_40 = null;
            var1_40 = (coord).y;
            var2_39 = new Boolean((var1_40.doubleValue()) > (BOARD_uSIZE.intValue()));
            cond_24 = var2_39;
          }
        }
        if (cond_24.booleanValue()) 
          b = (Boolean) UTIL.clone(new Boolean(true));
        i = UTIL.NumberToInt(UTIL.clone(new Integer(i.intValue() + new Integer(1).intValue())));
      }
      return b;
    }
    finally {
      sentinel.leaving(((BoardSentinel) sentinel).isPieceOutOfBounds);
    }
  }
// ***** VDMTOOLS END Name=isPieceOutOfBounds#2|Piece


// ***** VDMTOOLS START Name=pre_isPieceOutOfBounds#2|Piece KEEP=NO
  public Boolean pre_isPieceOutOfBounds (final Piece piece, final Piece.Coord start_ucoord) throws CGException {

    Boolean varRes_3 = null;
    Boolean var1_4 = null;
    Boolean var1_5 = null;
    Boolean var1_6 = null;
    Double var1_7 = null;
    var1_7 = (start_ucoord).x;
    var1_6 = new Boolean((var1_7.doubleValue()) > (new Integer(0).intValue()));
    {
      if ((var1_5 = var1_6).booleanValue()) {

        Boolean var2_10 = null;
        Double var1_11 = null;
        var1_11 = (start_ucoord).y;
        var2_10 = new Boolean((var1_11.doubleValue()) > (new Integer(0).intValue()));
        var1_5 = var2_10;
      }
    }
    {
      if ((var1_4 = var1_5).booleanValue()) {

        Boolean var2_14 = null;
        Double var1_15 = null;
        var1_15 = (start_ucoord).x;
        var2_14 = new Boolean((var1_15.doubleValue()) <= (BOARD_uSIZE.intValue()));
        var1_4 = var2_14;
      }
    }
    {
      if ((varRes_3 = var1_4).booleanValue()) {

        Boolean var2_18 = null;
        Double var1_19 = null;
        var1_19 = (start_ucoord).y;
        var2_18 = new Boolean((var1_19.doubleValue()) <= (BOARD_uSIZE.intValue()));
        varRes_3 = var2_18;
      }
    }
    return varRes_3;
  }
// ***** VDMTOOLS END Name=pre_isPieceOutOfBounds#2|Piece


// ***** VDMTOOLS START Name=returnPieceCoordsInBoard#2|Piece KEEP=NO
  public Vector returnPieceCoordsInBoard (final Piece p, final Piece.Coord c) throws CGException {

    if (!this.pre_returnPieceCoordsInBoard(p, c).booleanValue()) 
      UTIL.RunTime("Run-Time Error:Precondition failure in returnPieceCoordsInBoard");
    sentinel.entering(((BoardSentinel) sentinel).returnPieceCoordsInBoard);
    try {

      Integer i = new Integer(1);
      Piece.Coord coord = null;
      Vector coords = null;
      HashMap tmp_m_3 = new HashMap();
      tmp_m_3 = p.getPositionsToDraw();
      Object tmppar_4 = null;
      tmppar_4 = p.getCurrDirection();
      coords = (Vector) UTIL.ConvertToList(tmp_m_3.get(tmppar_4));
      Vector ret = new Vector();
      while ( new Boolean((i.intValue()) <= (new Integer(coords.size()).intValue())).booleanValue()){

        Piece.Coord rhs_9 = null;
        Double tmpVar_10 = null;
        Double var1_11 = null;
        var1_11 = (c).x;
        Double var2_13 = null;
        Piece.Coord tmpRec_14 = null;
        if ((1 <= i.intValue()) && (i.intValue() <= coords.size())) 
          tmpRec_14 = (Piece.Coord) coords.get(i.intValue() - 1);
        else 
          UTIL.RunTime("Run-Time Error:Illegal index");
        var2_13 = (tmpRec_14).x;
        tmpVar_10 = new Double(var1_11.doubleValue() + var2_13.doubleValue());
        Double tmpVar_17 = null;
        Double var1_18 = null;
        var1_18 = (c).y;
        Double var2_20 = null;
        Piece.Coord tmpRec_21 = null;
        if ((1 <= i.intValue()) && (i.intValue() <= coords.size())) 
          tmpRec_21 = (Piece.Coord) coords.get(i.intValue() - 1);
        else 
          UTIL.RunTime("Run-Time Error:Illegal index");
        var2_20 = (tmpRec_21).y;
        tmpVar_17 = new Double(var1_18.doubleValue() + var2_20.doubleValue());
        rhs_9 = new Piece.Coord(tmpVar_10, tmpVar_17);
        coord = (Piece.Coord) UTIL.clone(rhs_9);
        ret.add(coord);
        i = UTIL.NumberToInt(UTIL.clone(new Integer(i.intValue() + new Integer(1).intValue())));
      }
      return ret;
    }
    finally {
      sentinel.leaving(((BoardSentinel) sentinel).returnPieceCoordsInBoard);
    }
  }
// ***** VDMTOOLS END Name=returnPieceCoordsInBoard#2|Piece


// ***** VDMTOOLS START Name=pre_returnPieceCoordsInBoard#2|Piece KEEP=NO
  public Boolean pre_returnPieceCoordsInBoard (final Piece p, final Piece.Coord c) throws CGException {

    Boolean varRes_3 = null;
    Boolean var1_4 = null;
    Boolean var1_5 = null;
    Boolean var1_6 = null;
    Double var1_7 = null;
    var1_7 = (c).x;
    var1_6 = new Boolean((var1_7.doubleValue()) > (new Integer(0).intValue()));
    {
      if ((var1_5 = var1_6).booleanValue()) {

        Boolean var2_10 = null;
        Double var1_11 = null;
        var1_11 = (c).y;
        var2_10 = new Boolean((var1_11.doubleValue()) > (new Integer(0).intValue()));
        var1_5 = var2_10;
      }
    }
    {
      if ((var1_4 = var1_5).booleanValue()) {

        Boolean var2_14 = null;
        Double var1_15 = null;
        var1_15 = (c).x;
        var2_14 = new Boolean((var1_15.doubleValue()) <= (BOARD_uSIZE.intValue()));
        var1_4 = var2_14;
      }
    }
    {
      if ((varRes_3 = var1_4).booleanValue()) {

        Boolean var2_18 = null;
        Double var1_19 = null;
        var1_19 = (c).y;
        var2_18 = new Boolean((var1_19.doubleValue()) <= (BOARD_uSIZE.intValue()));
        varRes_3 = var2_18;
      }
    }
    return varRes_3;
  }
// ***** VDMTOOLS END Name=pre_returnPieceCoordsInBoard#2|Piece


// ***** VDMTOOLS START Name=validCorner#2|Vector KEEP=NO
  public Boolean validCorner (final Piece.Coord c, final Vector s) throws CGException {

    if (!this.pre_validCorner(c, s).booleanValue()) 
      UTIL.RunTime("Run-Time Error:Precondition failure in validCorner");
    sentinel.entering(((BoardSentinel) sentinel).validCorner);
    try {

      Vector sides = null;
      Piece.Coord e_seq_3 = null;
      Double tmpVar_4 = null;
      Double var1_5 = null;
      var1_5 = (c).x;
      tmpVar_4 = new Double(var1_5.doubleValue() - new Integer(1).intValue());
      Double tmpVar_8 = null;
      tmpVar_8 = (c).y;
      e_seq_3 = new Piece.Coord(tmpVar_4, tmpVar_8);
      sides = new Vector();
      sides.add(e_seq_3);
      Piece.Coord e_seq_10 = null;
      Double tmpVar_11 = null;
      Double var1_12 = null;
      var1_12 = (c).x;
      tmpVar_11 = new Double(var1_12.doubleValue() + new Integer(1).intValue());
      Double tmpVar_15 = null;
      tmpVar_15 = (c).y;
      e_seq_10 = new Piece.Coord(tmpVar_11, tmpVar_15);
      sides.add(e_seq_10);
      Piece.Coord e_seq_17 = null;
      Double tmpVar_18 = null;
      tmpVar_18 = (c).x;
      Double tmpVar_20 = null;
      Double var1_21 = null;
      var1_21 = (c).y;
      tmpVar_20 = new Double(var1_21.doubleValue() - new Integer(1).intValue());
      e_seq_17 = new Piece.Coord(tmpVar_18, tmpVar_20);
      sides.add(e_seq_17);
      Piece.Coord e_seq_24 = null;
      Double tmpVar_25 = null;
      tmpVar_25 = (c).x;
      Double tmpVar_27 = null;
      Double var1_28 = null;
      var1_28 = (c).y;
      tmpVar_27 = new Double(var1_28.doubleValue() + new Integer(1).intValue());
      e_seq_24 = new Piece.Coord(tmpVar_25, tmpVar_27);
      sides.add(e_seq_24);
      Boolean b = new Boolean(true);
      Integer i = new Integer(1);
      while ( new Boolean((i.intValue()) <= (new Integer(s.size()).intValue())).booleanValue()){

        Boolean cond_35 = null;
        Boolean unArg_36 = null;
        Piece.Coord var2_38 = null;
        if ((1 <= i.intValue()) && (i.intValue() <= s.size())) 
          var2_38 = (Piece.Coord) s.get(i.intValue() - 1);
        else 
          UTIL.RunTime("Run-Time Error:Illegal index");
        unArg_36 = new Boolean(UTIL.equals(c, var2_38));
        cond_35 = new Boolean(!unArg_36.booleanValue());
        if (cond_35.booleanValue()) {

          Boolean cond_41 = null;
          Boolean var1_42 = null;
          Boolean var1_43 = null;
          Boolean var1_44 = null;
          Piece.Coord var1_45 = null;
          if ((1 <= new Integer(1).intValue()) && (new Integer(1).intValue() <= sides.size())) 
            var1_45 = (Piece.Coord) sides.get(new Integer(1).intValue() - 1);
          else 
            UTIL.RunTime("Run-Time Error:Illegal index");
          Piece.Coord var2_48 = null;
          if ((1 <= i.intValue()) && (i.intValue() <= s.size())) 
            var2_48 = (Piece.Coord) s.get(i.intValue() - 1);
          else 
            UTIL.RunTime("Run-Time Error:Illegal index");
          var1_44 = new Boolean(UTIL.equals(var1_45, var2_48));
          {
            if (!(var1_43 = var1_44).booleanValue()) {

              Boolean var2_51 = null;
              Piece.Coord var1_52 = null;
              if ((1 <= new Integer(2).intValue()) && (new Integer(2).intValue() <= sides.size())) 
                var1_52 = (Piece.Coord) sides.get(new Integer(2).intValue() - 1);
              else 
                UTIL.RunTime("Run-Time Error:Illegal index");
              Piece.Coord var2_55 = null;
              if ((1 <= i.intValue()) && (i.intValue() <= s.size())) 
                var2_55 = (Piece.Coord) s.get(i.intValue() - 1);
              else 
                UTIL.RunTime("Run-Time Error:Illegal index");
              var2_51 = new Boolean(UTIL.equals(var1_52, var2_55));
              var1_43 = var2_51;
            }
          }
          {
            if (!(var1_42 = var1_43).booleanValue()) {

              Boolean var2_58 = null;
              Piece.Coord var1_59 = null;
              if ((1 <= new Integer(3).intValue()) && (new Integer(3).intValue() <= sides.size())) 
                var1_59 = (Piece.Coord) sides.get(new Integer(3).intValue() - 1);
              else 
                UTIL.RunTime("Run-Time Error:Illegal index");
              Piece.Coord var2_62 = null;
              if ((1 <= i.intValue()) && (i.intValue() <= s.size())) 
                var2_62 = (Piece.Coord) s.get(i.intValue() - 1);
              else 
                UTIL.RunTime("Run-Time Error:Illegal index");
              var2_58 = new Boolean(UTIL.equals(var1_59, var2_62));
              var1_42 = var2_58;
            }
          }
          {
            if (!(cond_41 = var1_42).booleanValue()) {

              Boolean var2_65 = null;
              Piece.Coord var1_66 = null;
              if ((1 <= new Integer(4).intValue()) && (new Integer(4).intValue() <= sides.size())) 
                var1_66 = (Piece.Coord) sides.get(new Integer(4).intValue() - 1);
              else 
                UTIL.RunTime("Run-Time Error:Illegal index");
              Piece.Coord var2_69 = null;
              if ((1 <= i.intValue()) && (i.intValue() <= s.size())) 
                var2_69 = (Piece.Coord) s.get(i.intValue() - 1);
              else 
                UTIL.RunTime("Run-Time Error:Illegal index");
              var2_65 = new Boolean(UTIL.equals(var1_66, var2_69));
              cond_41 = var2_65;
            }
          }
          if (cond_41.booleanValue()) 
            b = (Boolean) UTIL.clone(new Boolean(false));
        }
        i = UTIL.NumberToInt(UTIL.clone(new Integer(i.intValue() + new Integer(1).intValue())));
      }
      return b;
    }
    finally {
      sentinel.leaving(((BoardSentinel) sentinel).validCorner);
    }
  }
// ***** VDMTOOLS END Name=validCorner#2|Vector


// ***** VDMTOOLS START Name=pre_validCorner#2|Vector KEEP=NO
  public Boolean pre_validCorner (final Piece.Coord c, final Vector s) throws CGException {

    Boolean varRes_3 = null;
    Boolean var1_4 = null;
    Boolean var1_5 = null;
    Boolean var1_6 = null;
    Boolean var1_7 = null;
    Double var1_8 = null;
    var1_8 = (c).x;
    var1_7 = new Boolean((var1_8.doubleValue()) > (new Integer(0).intValue()));
    {
      if ((var1_6 = var1_7).booleanValue()) {

        Boolean var2_11 = null;
        Double var1_12 = null;
        var1_12 = (c).y;
        var2_11 = new Boolean((var1_12.doubleValue()) > (new Integer(0).intValue()));
        var1_6 = var2_11;
      }
    }
    {
      if ((var1_5 = var1_6).booleanValue()) {

        Boolean var2_15 = null;
        Double var1_16 = null;
        var1_16 = (c).x;
        var2_15 = new Boolean((var1_16.doubleValue()) <= (BOARD_uSIZE.intValue()));
        var1_5 = var2_15;
      }
    }
    {
      if ((var1_4 = var1_5).booleanValue()) {

        Boolean var2_19 = null;
        Double var1_20 = null;
        var1_20 = (c).y;
        var2_19 = new Boolean((var1_20.doubleValue()) <= (BOARD_uSIZE.intValue()));
        var1_4 = var2_19;
      }
    }
    {
      if ((varRes_3 = var1_4).booleanValue()) 
        varRes_3 = new Boolean((new Integer(s.size()).intValue()) > (new Integer(0).intValue()));
    }
    return varRes_3;
  }
// ***** VDMTOOLS END Name=pre_validCorner#2|Vector


// ***** VDMTOOLS START Name=doesPieceTouchCorner#2|Piece KEEP=NO
  public Boolean doesPieceTouchCorner (final Piece piece, final Piece.Coord start_ucoord) throws CGException {

    if (!this.pre_doesPieceTouchCorner(piece, start_ucoord).booleanValue()) 
      UTIL.RunTime("Run-Time Error:Precondition failure in doesPieceTouchCorner");
    sentinel.entering(((BoardSentinel) sentinel).doesPieceTouchCorner);
    try {

      Integer i = new Integer(1);
      Boolean b = new Boolean(false);
      Vector cornerCoords = null;
      HashMap tmp_m_3 = new HashMap();
      tmp_m_3 = piece.getCorners();
      Object tmppar_4 = null;
      tmppar_4 = piece.getCurrDirection();
      cornerCoords = (Vector) UTIL.ConvertToList(tmp_m_3.get(tmppar_4));
      Vector corners = null;
      Vector coordsInBoard = returnPieceCoordsInBoard((Piece) piece, start_ucoord);
      while ( new Boolean((i.intValue()) <= (new Integer(coordsInBoard.size()).intValue())).booleanValue()){

        if (new Boolean(UTIL.equals(b, new Boolean(true))).booleanValue()) 
          return b;
        Vector rhs_15 = null;
        Piece.Coord e_seq_16 = null;
        Double tmpVar_17 = null;
        Double var1_18 = null;
        Piece.Coord tmpRec_19 = null;
        if ((1 <= i.intValue()) && (i.intValue() <= cornerCoords.size())) 
          tmpRec_19 = (Piece.Coord) cornerCoords.get(i.intValue() - 1);
        else 
          UTIL.RunTime("Run-Time Error:Illegal index");
        var1_18 = (tmpRec_19).x;
        tmpVar_17 = new Double(var1_18.doubleValue() - new Integer(1).intValue());
        Double tmpVar_23 = null;
        Double var1_24 = null;
        Piece.Coord tmpRec_25 = null;
        if ((1 <= i.intValue()) && (i.intValue() <= cornerCoords.size())) 
          tmpRec_25 = (Piece.Coord) cornerCoords.get(i.intValue() - 1);
        else 
          UTIL.RunTime("Run-Time Error:Illegal index");
        var1_24 = (tmpRec_25).y;
        tmpVar_23 = new Double(var1_24.doubleValue() - new Integer(1).intValue());
        e_seq_16 = new Piece.Coord(tmpVar_17, tmpVar_23);
        rhs_15 = new Vector();
        rhs_15.add(e_seq_16);
        Piece.Coord e_seq_29 = null;
        Double tmpVar_30 = null;
        Double var1_31 = null;
        Piece.Coord tmpRec_32 = null;
        if ((1 <= i.intValue()) && (i.intValue() <= cornerCoords.size())) 
          tmpRec_32 = (Piece.Coord) cornerCoords.get(i.intValue() - 1);
        else 
          UTIL.RunTime("Run-Time Error:Illegal index");
        var1_31 = (tmpRec_32).x;
        tmpVar_30 = new Double(var1_31.doubleValue() + new Integer(1).intValue());
        Double tmpVar_36 = null;
        Double var1_37 = null;
        Piece.Coord tmpRec_38 = null;
        if ((1 <= i.intValue()) && (i.intValue() <= cornerCoords.size())) 
          tmpRec_38 = (Piece.Coord) cornerCoords.get(i.intValue() - 1);
        else 
          UTIL.RunTime("Run-Time Error:Illegal index");
        var1_37 = (tmpRec_38).y;
        tmpVar_36 = new Double(var1_37.doubleValue() - new Integer(1).intValue());
        e_seq_29 = new Piece.Coord(tmpVar_30, tmpVar_36);
        rhs_15.add(e_seq_29);
        Piece.Coord e_seq_42 = null;
        Double tmpVar_43 = null;
        Double var1_44 = null;
        Piece.Coord tmpRec_45 = null;
        if ((1 <= i.intValue()) && (i.intValue() <= cornerCoords.size())) 
          tmpRec_45 = (Piece.Coord) cornerCoords.get(i.intValue() - 1);
        else 
          UTIL.RunTime("Run-Time Error:Illegal index");
        var1_44 = (tmpRec_45).x;
        tmpVar_43 = new Double(var1_44.doubleValue() + new Integer(1).intValue());
        Double tmpVar_49 = null;
        Double var1_50 = null;
        Piece.Coord tmpRec_51 = null;
        if ((1 <= i.intValue()) && (i.intValue() <= cornerCoords.size())) 
          tmpRec_51 = (Piece.Coord) cornerCoords.get(i.intValue() - 1);
        else 
          UTIL.RunTime("Run-Time Error:Illegal index");
        var1_50 = (tmpRec_51).y;
        tmpVar_49 = new Double(var1_50.doubleValue() + new Integer(1).intValue());
        e_seq_42 = new Piece.Coord(tmpVar_43, tmpVar_49);
        rhs_15.add(e_seq_42);
        Piece.Coord e_seq_55 = null;
        Double tmpVar_56 = null;
        Double var1_57 = null;
        Piece.Coord tmpRec_58 = null;
        if ((1 <= i.intValue()) && (i.intValue() <= cornerCoords.size())) 
          tmpRec_58 = (Piece.Coord) cornerCoords.get(i.intValue() - 1);
        else 
          UTIL.RunTime("Run-Time Error:Illegal index");
        var1_57 = (tmpRec_58).x;
        tmpVar_56 = new Double(var1_57.doubleValue() - new Integer(1).intValue());
        Double tmpVar_62 = null;
        Double var1_63 = null;
        Piece.Coord tmpRec_64 = null;
        if ((1 <= i.intValue()) && (i.intValue() <= cornerCoords.size())) 
          tmpRec_64 = (Piece.Coord) cornerCoords.get(i.intValue() - 1);
        else 
          UTIL.RunTime("Run-Time Error:Illegal index");
        var1_63 = (tmpRec_64).y;
        tmpVar_62 = new Double(var1_63.doubleValue() + new Integer(1).intValue());
        e_seq_55 = new Piece.Coord(tmpVar_56, tmpVar_62);
        rhs_15.add(e_seq_55);
        corners = (Vector) UTIL.ConvertToList(UTIL.clone(rhs_15));
        for (int ilb_70 = 1; ilb_70 <= 4; ilb_70++) {

          Integer y = new Integer(ilb_70);
          {

            Boolean cond_71 = null;
            Piece.Coord par_72 = null;
            if ((1 <= y.intValue()) && (y.intValue() <= corners.size())) 
              par_72 = (Piece.Coord) corners.get(y.intValue() - 1);
            else 
              UTIL.RunTime("Run-Time Error:Illegal index");
            cond_71 = validCorner(par_72, coordsInBoard);
            if (cond_71.booleanValue()) {

              Boolean cond_76 = null;
              Object var1_77 = null;
              Piece.Coord tmppar_79 = null;
              if ((1 <= y.intValue()) && (y.intValue() <= corners.size())) 
                tmppar_79 = (Piece.Coord) corners.get(y.intValue() - 1);
              else 
                UTIL.RunTime("Run-Time Error:Illegal index");
              var1_77 = board.get(tmppar_79);
              Object var2_82 = null;
              var2_82 = piece.getColor();
              cond_76 = new Boolean(UTIL.equals(var1_77, var2_82));
              if (cond_76.booleanValue()) 
                b = (Boolean) UTIL.clone(new Boolean(true));
            }
          }
        }
        i = UTIL.NumberToInt(UTIL.clone(new Integer(i.intValue() + new Integer(1).intValue())));
      }
      return b;
    }
    finally {
      sentinel.leaving(((BoardSentinel) sentinel).doesPieceTouchCorner);
    }
  }
// ***** VDMTOOLS END Name=doesPieceTouchCorner#2|Piece


// ***** VDMTOOLS START Name=pre_doesPieceTouchCorner#2|Piece KEEP=NO
  public Boolean pre_doesPieceTouchCorner (final Piece piece, final Piece.Coord start_ucoord) throws CGException {

    Boolean varRes_3 = null;
    Boolean var1_4 = null;
    Boolean var1_5 = null;
    Boolean var1_6 = null;
    Double var1_7 = null;
    var1_7 = (start_ucoord).x;
    var1_6 = new Boolean((var1_7.doubleValue()) > (new Integer(0).intValue()));
    {
      if ((var1_5 = var1_6).booleanValue()) {

        Boolean var2_10 = null;
        Double var1_11 = null;
        var1_11 = (start_ucoord).y;
        var2_10 = new Boolean((var1_11.doubleValue()) > (new Integer(0).intValue()));
        var1_5 = var2_10;
      }
    }
    {
      if ((var1_4 = var1_5).booleanValue()) {

        Boolean var2_14 = null;
        Double var1_15 = null;
        var1_15 = (start_ucoord).x;
        var2_14 = new Boolean((var1_15.doubleValue()) <= (BOARD_uSIZE.intValue()));
        var1_4 = var2_14;
      }
    }
    {
      if ((varRes_3 = var1_4).booleanValue()) {

        Boolean var2_18 = null;
        Double var1_19 = null;
        var1_19 = (start_ucoord).y;
        var2_18 = new Boolean((var1_19.doubleValue()) <= (BOARD_uSIZE.intValue()));
        varRes_3 = var2_18;
      }
    }
    return varRes_3;
  }
// ***** VDMTOOLS END Name=pre_doesPieceTouchCorner#2|Piece


// ***** VDMTOOLS START Name=doesPieceTouchSameColorOnSides#2|Piece KEEP=NO
  public Boolean doesPieceTouchSameColorOnSides (final Piece piece, final Piece.Coord start_ucoord) throws CGException {

    if (!this.pre_doesPieceTouchSameColorOnSides(piece, start_ucoord).booleanValue()) 
      UTIL.RunTime("Run-Time Error:Precondition failure in doesPieceTouchSameColorOnSides");
    sentinel.entering(((BoardSentinel) sentinel).doesPieceTouchSameColorOnSides);
    try {

      Integer i = new Integer(1);
      Boolean b = new Boolean(true);
      Vector sides = null;
      Vector coordsInBoard = returnPieceCoordsInBoard((Piece) piece, start_ucoord);
      while ( new Boolean((i.intValue()) <= (new Integer(coordsInBoard.size()).intValue())).booleanValue()){

        Vector rhs_9 = null;
        Piece.Coord e_seq_10 = null;
        Double tmpVar_11 = null;
        Double var1_12 = null;
        Piece.Coord tmpRec_13 = null;
        if ((1 <= i.intValue()) && (i.intValue() <= coordsInBoard.size())) 
          tmpRec_13 = (Piece.Coord) coordsInBoard.get(i.intValue() - 1);
        else 
          UTIL.RunTime("Run-Time Error:Illegal index");
        var1_12 = (tmpRec_13).x;
        tmpVar_11 = new Double(var1_12.doubleValue() - new Integer(1).intValue());
        Double tmpVar_17 = null;
        Piece.Coord tmpRec_18 = null;
        if ((1 <= i.intValue()) && (i.intValue() <= coordsInBoard.size())) 
          tmpRec_18 = (Piece.Coord) coordsInBoard.get(i.intValue() - 1);
        else 
          UTIL.RunTime("Run-Time Error:Illegal index");
        tmpVar_17 = (tmpRec_18).y;
        e_seq_10 = new Piece.Coord(tmpVar_11, tmpVar_17);
        rhs_9 = new Vector();
        rhs_9.add(e_seq_10);
        Piece.Coord e_seq_21 = null;
        Double tmpVar_22 = null;
        Double var1_23 = null;
        Piece.Coord tmpRec_24 = null;
        if ((1 <= i.intValue()) && (i.intValue() <= coordsInBoard.size())) 
          tmpRec_24 = (Piece.Coord) coordsInBoard.get(i.intValue() - 1);
        else 
          UTIL.RunTime("Run-Time Error:Illegal index");
        var1_23 = (tmpRec_24).x;
        tmpVar_22 = new Double(var1_23.doubleValue() + new Integer(1).intValue());
        Double tmpVar_28 = null;
        Piece.Coord tmpRec_29 = null;
        if ((1 <= i.intValue()) && (i.intValue() <= coordsInBoard.size())) 
          tmpRec_29 = (Piece.Coord) coordsInBoard.get(i.intValue() - 1);
        else 
          UTIL.RunTime("Run-Time Error:Illegal index");
        tmpVar_28 = (tmpRec_29).y;
        e_seq_21 = new Piece.Coord(tmpVar_22, tmpVar_28);
        rhs_9.add(e_seq_21);
        Piece.Coord e_seq_32 = null;
        Double tmpVar_33 = null;
        Piece.Coord tmpRec_34 = null;
        if ((1 <= i.intValue()) && (i.intValue() <= coordsInBoard.size())) 
          tmpRec_34 = (Piece.Coord) coordsInBoard.get(i.intValue() - 1);
        else 
          UTIL.RunTime("Run-Time Error:Illegal index");
        tmpVar_33 = (tmpRec_34).x;
        Double tmpVar_37 = null;
        Double var1_38 = null;
        Piece.Coord tmpRec_39 = null;
        if ((1 <= i.intValue()) && (i.intValue() <= coordsInBoard.size())) 
          tmpRec_39 = (Piece.Coord) coordsInBoard.get(i.intValue() - 1);
        else 
          UTIL.RunTime("Run-Time Error:Illegal index");
        var1_38 = (tmpRec_39).y;
        tmpVar_37 = new Double(var1_38.doubleValue() - new Integer(1).intValue());
        e_seq_32 = new Piece.Coord(tmpVar_33, tmpVar_37);
        rhs_9.add(e_seq_32);
        Piece.Coord e_seq_43 = null;
        Double tmpVar_44 = null;
        Piece.Coord tmpRec_45 = null;
        if ((1 <= i.intValue()) && (i.intValue() <= coordsInBoard.size())) 
          tmpRec_45 = (Piece.Coord) coordsInBoard.get(i.intValue() - 1);
        else 
          UTIL.RunTime("Run-Time Error:Illegal index");
        tmpVar_44 = (tmpRec_45).x;
        Double tmpVar_48 = null;
        Double var1_49 = null;
        Piece.Coord tmpRec_50 = null;
        if ((1 <= i.intValue()) && (i.intValue() <= coordsInBoard.size())) 
          tmpRec_50 = (Piece.Coord) coordsInBoard.get(i.intValue() - 1);
        else 
          UTIL.RunTime("Run-Time Error:Illegal index");
        var1_49 = (tmpRec_50).y;
        tmpVar_48 = new Double(var1_49.doubleValue() + new Integer(1).intValue());
        e_seq_43 = new Piece.Coord(tmpVar_44, tmpVar_48);
        rhs_9.add(e_seq_43);
        sides = (Vector) UTIL.ConvertToList(UTIL.clone(rhs_9));
        for (int ilb_56 = 1; ilb_56 <= 4; ilb_56++) {

          Integer y = new Integer(ilb_56);
          {

            Boolean cond_57 = null;
            Boolean var1_58 = null;
            Piece.Coord var1_59 = null;
            if ((1 <= y.intValue()) && (y.intValue() <= sides.size())) 
              var1_59 = (Piece.Coord) sides.get(y.intValue() - 1);
            else 
              UTIL.RunTime("Run-Time Error:Illegal index");
            HashSet var2_62 = new HashSet();
            HashSet set_64 = new HashSet();
            Enumeration enm_65 = coordsInBoard.elements();
            while ( enm_65.hasMoreElements())
              set_64.add(enm_65.nextElement());
            var2_62 = set_64;
            var1_58 = new Boolean(var2_62.contains(var1_59));
            {
              if (!(cond_57 = var1_58).booleanValue()) {

                Boolean var2_66 = null;
                Object var1_67 = null;
                Piece.Coord tmppar_69 = null;
                if ((1 <= y.intValue()) && (y.intValue() <= sides.size())) 
                  tmppar_69 = (Piece.Coord) sides.get(y.intValue() - 1);
                else 
                  UTIL.RunTime("Run-Time Error:Illegal index");
                var1_67 = board.get(tmppar_69);
                Object var2_72 = null;
                var2_72 = piece.getColor();
                var2_66 = new Boolean(UTIL.equals(var1_67, var2_72));
                cond_57 = var2_66;
              }
            }
            if (cond_57.booleanValue()) 
              b = (Boolean) UTIL.clone(new Boolean(false));
          }
        }
        i = UTIL.NumberToInt(UTIL.clone(new Integer(i.intValue() + new Integer(1).intValue())));
      }
      return b;
    }
    finally {
      sentinel.leaving(((BoardSentinel) sentinel).doesPieceTouchSameColorOnSides);
    }
  }
// ***** VDMTOOLS END Name=doesPieceTouchSameColorOnSides#2|Piece


// ***** VDMTOOLS START Name=pre_doesPieceTouchSameColorOnSides#2|Piece KEEP=NO
  public Boolean pre_doesPieceTouchSameColorOnSides (final Piece piece, final Piece.Coord start_ucoord) throws CGException {

    Boolean varRes_3 = null;
    Boolean var1_4 = null;
    Boolean var1_5 = null;
    Boolean var1_6 = null;
    Double var1_7 = null;
    var1_7 = (start_ucoord).x;
    var1_6 = new Boolean((var1_7.doubleValue()) > (new Integer(0).intValue()));
    {
      if ((var1_5 = var1_6).booleanValue()) {

        Boolean var2_10 = null;
        Double var1_11 = null;
        var1_11 = (start_ucoord).y;
        var2_10 = new Boolean((var1_11.doubleValue()) > (new Integer(0).intValue()));
        var1_5 = var2_10;
      }
    }
    {
      if ((var1_4 = var1_5).booleanValue()) {

        Boolean var2_14 = null;
        Double var1_15 = null;
        var1_15 = (start_ucoord).x;
        var2_14 = new Boolean((var1_15.doubleValue()) <= (BOARD_uSIZE.intValue()));
        var1_4 = var2_14;
      }
    }
    {
      if ((varRes_3 = var1_4).booleanValue()) {

        Boolean var2_18 = null;
        Double var1_19 = null;
        var1_19 = (start_ucoord).y;
        var2_18 = new Boolean((var1_19.doubleValue()) <= (BOARD_uSIZE.intValue()));
        varRes_3 = var2_18;
      }
    }
    return varRes_3;
  }
// ***** VDMTOOLS END Name=pre_doesPieceTouchSameColorOnSides#2|Piece


// ***** VDMTOOLS START Name=getEmptyCoords KEEP=NO
  public HashMap getEmptyCoords () throws CGException {

    sentinel.entering(((BoardSentinel) sentinel).getEmptyCoords);
    try {

      HashMap ret = new HashMap();
      {

        HashSet iset_1 = new HashSet();
        iset_1.clear();
        iset_1.addAll(board.keySet());
        Piece.Coord c = null;
        for (Iterator enm_17 = iset_1.iterator(); enm_17.hasNext(); ) {

          Piece.Coord elem_2 = (Piece.Coord) enm_17.next();
          c = elem_2;
          if (new Boolean(UTIL.equals(board.get(c), new quotes.NONE())).booleanValue()) 
            ret.put(c, board.get(c));
        }
      }
      return ret;
    }
    finally {
      sentinel.leaving(((BoardSentinel) sentinel).getEmptyCoords);
    }
  }
// ***** VDMTOOLS END Name=getEmptyCoords


// ***** VDMTOOLS START Name=drawPiece#2|Piece KEEP=NO
  public void drawPiece (final Piece piece, final Piece.Coord start_ucoord) throws CGException {

    if (!this.pre_drawPiece(piece, start_ucoord).booleanValue()) 
      UTIL.RunTime("Run-Time Error:Precondition failure in drawPiece");
    sentinel.entering(((BoardSentinel) sentinel).drawPiece);
    try {

      Integer i = new Integer(1);
      HashMap m = new HashMap();
      m = piece.getPositionsToDraw();
      Vector coords = null;
      Object tmppar_4 = null;
      tmppar_4 = piece.getCurrDirection();
      coords = (Vector) UTIL.ConvertToList(m.get(tmppar_4));
      Piece.Coord coord = null;
      while ( new Boolean((i.intValue()) <= (new Integer(coords.size()).intValue())).booleanValue()){

        Piece.Coord rhs_9 = null;
        Double tmpVar_10 = null;
        Double var1_11 = null;
        var1_11 = (start_ucoord).x;
        Double var2_13 = null;
        Piece.Coord tmpRec_14 = null;
        if ((1 <= i.intValue()) && (i.intValue() <= coords.size())) 
          tmpRec_14 = (Piece.Coord) coords.get(i.intValue() - 1);
        else 
          UTIL.RunTime("Run-Time Error:Illegal index");
        var2_13 = (tmpRec_14).x;
        tmpVar_10 = new Double(var1_11.doubleValue() + var2_13.doubleValue());
        Double tmpVar_17 = null;
        Double var1_18 = null;
        var1_18 = (start_ucoord).y;
        Double var2_20 = null;
        Piece.Coord tmpRec_21 = null;
        if ((1 <= i.intValue()) && (i.intValue() <= coords.size())) 
          tmpRec_21 = (Piece.Coord) coords.get(i.intValue() - 1);
        else 
          UTIL.RunTime("Run-Time Error:Illegal index");
        var2_20 = (tmpRec_21).y;
        tmpVar_17 = new Double(var1_18.doubleValue() + var2_20.doubleValue());
        rhs_9 = new Piece.Coord(tmpVar_10, tmpVar_17);
        coord = (Piece.Coord) UTIL.clone(rhs_9);
        Object mr_26 = null;
        mr_26 = piece.getColor();
        board.put(coord, mr_26);
        i = UTIL.NumberToInt(UTIL.clone(new Integer(i.intValue() + new Integer(1).intValue())));
      }
    }
    finally {
      sentinel.leaving(((BoardSentinel) sentinel).drawPiece);
    }
  }
// ***** VDMTOOLS END Name=drawPiece#2|Piece


// ***** VDMTOOLS START Name=pre_drawPiece#2|Piece KEEP=NO
  public Boolean pre_drawPiece (final Piece piece, final Piece.Coord start_ucoord) throws CGException {

    Boolean varRes_3 = null;
    Boolean var1_4 = null;
    Boolean var1_5 = null;
    Boolean var1_6 = null;
    Double var1_7 = null;
    var1_7 = (start_ucoord).x;
    var1_6 = new Boolean((var1_7.doubleValue()) > (new Integer(0).intValue()));
    {
      if ((var1_5 = var1_6).booleanValue()) {

        Boolean var2_10 = null;
        Double var1_11 = null;
        var1_11 = (start_ucoord).y;
        var2_10 = new Boolean((var1_11.doubleValue()) > (new Integer(0).intValue()));
        var1_5 = var2_10;
      }
    }
    {
      if ((var1_4 = var1_5).booleanValue()) {

        Boolean var2_14 = null;
        Double var1_15 = null;
        var1_15 = (start_ucoord).x;
        var2_14 = new Boolean((var1_15.doubleValue()) <= (BOARD_uSIZE.intValue()));
        var1_4 = var2_14;
      }
    }
    {
      if ((varRes_3 = var1_4).booleanValue()) {

        Boolean var2_18 = null;
        Double var1_19 = null;
        var1_19 = (start_ucoord).y;
        var2_18 = new Boolean((var1_19.doubleValue()) <= (BOARD_uSIZE.intValue()));
        varRes_3 = var2_18;
      }
    }
    return varRes_3;
  }
// ***** VDMTOOLS END Name=pre_drawPiece#2|Piece

}
;
