//
// THIS FILE IS AUTOMATICALLY GENERATED!!
//
// Generated at 2012-12-07 by the VDM++ to JAVA Code Generator
// (v8.1.1b - Thu 30-Oct-2008 14:59:38)
//
// Supported compilers: jdk 1.4/1.5/1.6
//

// ***** VDMTOOLS START Name=HeaderComment KEEP=NO
// ***** VDMTOOLS END Name=HeaderComment

// ***** VDMTOOLS START Name=package KEEP=NO
// ***** VDMTOOLS END Name=package

// ***** VDMTOOLS START Name=imports KEEP=NO

import jp.co.csk.vdm.toolbox.VDM.*;
import java.util.*;
import jp.co.csk.vdm.toolbox.VDM.jdk.*;
// ***** VDMTOOLS END Name=imports



public class Player implements EvaluatePP {

// ***** VDMTOOLS START Name=vdmComp KEEP=NO
  static UTIL.VDMCompare vdmComp = new UTIL.VDMCompare();
// ***** VDMTOOLS END Name=vdmComp

// ***** VDMTOOLS START Name=name KEEP=NO
  private volatile String name = null;
// ***** VDMTOOLS END Name=name

// ***** VDMTOOLS START Name=color KEEP=NO
  private volatile Object color = null;
// ***** VDMTOOLS END Name=color

// ***** VDMTOOLS START Name=score KEEP=NO
  private volatile Integer score = null;
// ***** VDMTOOLS END Name=score

// ***** VDMTOOLS START Name=isPlaying KEEP=NO
  private volatile Boolean isPlaying = null;
// ***** VDMTOOLS END Name=isPlaying

// ***** VDMTOOLS START Name=lastPiecePlayed KEEP=NO
  private volatile Piece lastPiecePlayed = null;
// ***** VDMTOOLS END Name=lastPiecePlayed

// ***** VDMTOOLS START Name=currentPiece KEEP=NO
  private volatile Piece currentPiece = null;
// ***** VDMTOOLS END Name=currentPiece

// ***** VDMTOOLS START Name=playedFirstPiece KEEP=NO
  private volatile Boolean playedFirstPiece = null;
// ***** VDMTOOLS END Name=playedFirstPiece

// ***** VDMTOOLS START Name=pieces KEEP=NO
  private volatile Vector pieces = null;
// ***** VDMTOOLS END Name=pieces

// ***** VDMTOOLS START Name=sentinel KEEP=NO
  volatile Sentinel sentinel;
// ***** VDMTOOLS END Name=sentinel


// ***** VDMTOOLS START Name=PlayerSentinel KEEP=NO
  class PlayerSentinel extends Sentinel {

    public final int Player = 0;

    public final int getName = 1;

    public final int getColor = 2;

    public final int getScore = 3;

    public final int initHand = 4;

    public final int getPieces = 5;

    public final int choosePiece = 6;

    public final int updateScore = 7;

    public final int validPlayer = 8;

    public final int getCurrentPiece = 9;

    public final int getPlayingPiece = 10;

    public final int isPlayerPlaying = 11;

    public final int toggleIsPlaying = 12;

    public final int wasLastPieceMono = 13;

    public final int getLastPiecePlayed = 14;

    public final int hasPlayedFirstPiece = 15;

    public final int setPlayedFirstPiece = 16;

    public final int updateLastPiecePlayed = 17;

    public final int nr_functions = 18;


    public PlayerSentinel () throws CGException {}


    public PlayerSentinel (EvaluatePP instance) throws CGException {
      init(nr_functions, instance);
    }

  }
// ***** VDMTOOLS END Name=PlayerSentinel
;

// ***** VDMTOOLS START Name=evaluatePP#1|int KEEP=NO
  public Boolean evaluatePP (int fnr) throws CGException {
    return new Boolean(true);
  }
// ***** VDMTOOLS END Name=evaluatePP#1|int


// ***** VDMTOOLS START Name=setSentinel KEEP=NO
  public void setSentinel () {
    try {
      sentinel = new PlayerSentinel(this);
    }
    catch (CGException e) {
      System.out.println(e.getMessage());
    }
  }
// ***** VDMTOOLS END Name=setSentinel

// ***** VDMTOOLS START Name=INITIAL_uHAND_uSIZE KEEP=NO
  private static final Integer INITIAL_uHAND_uSIZE = new Integer(21);
// ***** VDMTOOLS END Name=INITIAL_uHAND_uSIZE


// ***** VDMTOOLS START Name=vdm_init_Player KEEP=NO
  private void vdm_init_Player () throws CGException {
    try {

      setSentinel();
      name = new String("");
      color = new quotes.NONE();
      score = new Integer(0);
      isPlaying = new Boolean(false);
      lastPiecePlayed = (Piece) new Piece();
      currentPiece = (Piece) new Piece();
      playedFirstPiece = new Boolean(false);
      pieces = new Vector();
    }
    catch (Exception e){

      e.printStackTrace(System.out);
      System.out.println(e.getMessage());
    }
  }
// ***** VDMTOOLS END Name=vdm_init_Player


// ***** VDMTOOLS START Name=Player KEEP=NO
  public Player () throws CGException {
    vdm_init_Player();
  }
// ***** VDMTOOLS END Name=Player


// ***** VDMTOOLS START Name=Player#2|String|Object KEEP=NO
  public Player (final String n, final Object c) throws CGException {

    if (!this.pre_Player(n, c).booleanValue()) 
      UTIL.RunTime("Run-Time Error:Precondition failure in Player");
    vdm_init_Player();
    {

      name = UTIL.ConvertToString(UTIL.clone(n));
      color = UTIL.clone(c);
      initHand();
    }
  }
// ***** VDMTOOLS END Name=Player#2|String|Object


// ***** VDMTOOLS START Name=pre_Player#2|String|Object KEEP=NO
  public Boolean pre_Player (final String n, final Object c) throws CGException {
    return validPlayer(n, c);
  }
// ***** VDMTOOLS END Name=pre_Player#2|String|Object


// ***** VDMTOOLS START Name=validPlayer#2|String|Object KEEP=NO
  public Boolean validPlayer (final String n, final Object c) throws CGException {

    sentinel.entering(((PlayerSentinel) sentinel).validPlayer);
    try {

      Boolean rexpr_3 = null;
      {
        if ((rexpr_3 = new Boolean((new Integer(n.length()).intValue()) > (new Integer(0).intValue()))).booleanValue()) 
          rexpr_3 = new Boolean(!UTIL.equals(c, new quotes.NONE()));
      }
      return rexpr_3;
    }
    finally {
      sentinel.leaving(((PlayerSentinel) sentinel).validPlayer);
    }
  }
// ***** VDMTOOLS END Name=validPlayer#2|String|Object


// ***** VDMTOOLS START Name=getName KEEP=NO
  public String getName () throws CGException {

    sentinel.entering(((PlayerSentinel) sentinel).getName);
    try {
      return name;
    }
    finally {
      sentinel.leaving(((PlayerSentinel) sentinel).getName);
    }
  }
// ***** VDMTOOLS END Name=getName


// ***** VDMTOOLS START Name=getColor KEEP=NO
  public Object getColor () throws CGException {

    sentinel.entering(((PlayerSentinel) sentinel).getColor);
    try {
      return color;
    }
    finally {
      sentinel.leaving(((PlayerSentinel) sentinel).getColor);
    }
  }
// ***** VDMTOOLS END Name=getColor


// ***** VDMTOOLS START Name=isPlayerPlaying KEEP=NO
  public Boolean isPlayerPlaying () throws CGException {

    sentinel.entering(((PlayerSentinel) sentinel).isPlayerPlaying);
    try {
      return isPlaying;
    }
    finally {
      sentinel.leaving(((PlayerSentinel) sentinel).isPlayerPlaying);
    }
  }
// ***** VDMTOOLS END Name=isPlayerPlaying


// ***** VDMTOOLS START Name=getCurrentPiece KEEP=NO
  public Piece getCurrentPiece () throws CGException {

    sentinel.entering(((PlayerSentinel) sentinel).getCurrentPiece);
    try {
      return (Piece) currentPiece;
    }
    finally {
      sentinel.leaving(((PlayerSentinel) sentinel).getCurrentPiece);
    }
  }
// ***** VDMTOOLS END Name=getCurrentPiece


// ***** VDMTOOLS START Name=choosePiece#1|Integer KEEP=NO
  public void choosePiece (final Integer i) throws CGException {

    if (!this.pre_choosePiece(i).booleanValue()) 
      UTIL.RunTime("Run-Time Error:Precondition failure in choosePiece");
    sentinel.entering(((PlayerSentinel) sentinel).choosePiece);
    try {

      Piece rhs_2 = null;
      if ((1 <= i.intValue()) && (i.intValue() <= pieces.size())) 
        rhs_2 = (Piece) pieces.get(i.intValue() - 1);
      else 
        UTIL.RunTime("Run-Time Error:Illegal index");
      currentPiece = (Piece) UTIL.clone(rhs_2);
    }
    finally {
      sentinel.leaving(((PlayerSentinel) sentinel).choosePiece);
    }
  }
// ***** VDMTOOLS END Name=choosePiece#1|Integer


// ***** VDMTOOLS START Name=pre_choosePiece#1|Integer KEEP=NO
  public Boolean pre_choosePiece (final Integer i) throws CGException {

    Boolean varRes_2 = null;
    HashSet var2_4 = new HashSet();
    HashSet riseq_6 = new HashSet();
    int max_7 = pieces.size();
    for (int i_8 = 1; i_8 <= max_7; i_8++) 
      riseq_6.add(new Integer(i_8));
    var2_4 = riseq_6;
    varRes_2 = new Boolean(var2_4.contains(i));
    return varRes_2;
  }
// ***** VDMTOOLS END Name=pre_choosePiece#1|Integer


// ***** VDMTOOLS START Name=getLastPiecePlayed KEEP=NO
  public Piece getLastPiecePlayed () throws CGException {

    sentinel.entering(((PlayerSentinel) sentinel).getLastPiecePlayed);
    try {
      return (Piece) lastPiecePlayed;
    }
    finally {
      sentinel.leaving(((PlayerSentinel) sentinel).getLastPiecePlayed);
    }
  }
// ***** VDMTOOLS END Name=getLastPiecePlayed


// ***** VDMTOOLS START Name=toggleIsPlaying KEEP=NO
  public void toggleIsPlaying () throws CGException {

    sentinel.entering(((PlayerSentinel) sentinel).toggleIsPlaying);
    try {
      if (new Boolean(UTIL.equals(isPlaying, new Boolean(true))).booleanValue()) 
        isPlaying = (Boolean) UTIL.clone(new Boolean(false));
      else 
        isPlaying = (Boolean) UTIL.clone(new Boolean(true));
    }
    finally {
      sentinel.leaving(((PlayerSentinel) sentinel).toggleIsPlaying);
    }
  }
// ***** VDMTOOLS END Name=toggleIsPlaying


// ***** VDMTOOLS START Name=hasPlayedFirstPiece KEEP=NO
  public Boolean hasPlayedFirstPiece () throws CGException {

    sentinel.entering(((PlayerSentinel) sentinel).hasPlayedFirstPiece);
    try {
      return playedFirstPiece;
    }
    finally {
      sentinel.leaving(((PlayerSentinel) sentinel).hasPlayedFirstPiece);
    }
  }
// ***** VDMTOOLS END Name=hasPlayedFirstPiece


// ***** VDMTOOLS START Name=getPieces KEEP=NO
  public Vector getPieces () throws CGException {

    if (!this.pre_getPieces().booleanValue()) 
      UTIL.RunTime("Run-Time Error:Precondition failure in getPieces");
    sentinel.entering(((PlayerSentinel) sentinel).getPieces);
    try {
      return pieces;
    }
    finally {
      sentinel.leaving(((PlayerSentinel) sentinel).getPieces);
    }
  }
// ***** VDMTOOLS END Name=getPieces


// ***** VDMTOOLS START Name=pre_getPieces KEEP=NO
  public Boolean pre_getPieces () throws CGException {
    return new Boolean((new Integer(pieces.size()).intValue()) > (new Integer(0).intValue()));
  }
// ***** VDMTOOLS END Name=pre_getPieces


// ***** VDMTOOLS START Name=setPlayedFirstPiece#1|Boolean KEEP=NO
  public void setPlayedFirstPiece (final Boolean b) throws CGException {

    sentinel.entering(((PlayerSentinel) sentinel).setPlayedFirstPiece);
    try {
      playedFirstPiece = (Boolean) UTIL.clone(b);
    }
    finally {
      sentinel.leaving(((PlayerSentinel) sentinel).setPlayedFirstPiece);
    }
  }
// ***** VDMTOOLS END Name=setPlayedFirstPiece#1|Boolean


// ***** VDMTOOLS START Name=updateLastPiecePlayed KEEP=NO
  public void updateLastPiecePlayed () throws CGException {

    sentinel.entering(((PlayerSentinel) sentinel).updateLastPiecePlayed);
    try {

      Vector alea = new Vector();
      Integer i = new Integer(1);
      while ( new Boolean((i.intValue()) <= (new Integer(pieces.size()).intValue())).booleanValue()){

        Boolean cond_5 = null;
        Boolean unArg_6 = null;
        Piece par_7 = null;
        if ((1 <= i.intValue()) && (i.intValue() <= pieces.size())) 
          par_7 = (Piece) pieces.get(i.intValue() - 1);
        else 
          UTIL.RunTime("Run-Time Error:Illegal index");
        unArg_6 = currentPiece.vdm_equals((Piece) par_7);
        cond_5 = new Boolean(!unArg_6.booleanValue());
        if (cond_5.booleanValue()) {

          Piece e_11 = null;
          if ((1 <= i.intValue()) && (i.intValue() <= pieces.size())) 
            e_11 = (Piece) pieces.get(i.intValue() - 1);
          else 
            UTIL.RunTime("Run-Time Error:Illegal index");
          alea.add(e_11);
        }
        i = UTIL.NumberToInt(UTIL.clone(new Integer(i.intValue() + new Integer(1).intValue())));
      }
      pieces = (Vector) UTIL.ConvertToList(UTIL.clone(alea));
      lastPiecePlayed = (Piece) UTIL.clone(currentPiece);
    }
    finally {
      sentinel.leaving(((PlayerSentinel) sentinel).updateLastPiecePlayed);
    }
  }
// ***** VDMTOOLS END Name=updateLastPiecePlayed


// ***** VDMTOOLS START Name=wasLastPieceMono KEEP=NO
  public Boolean wasLastPieceMono () throws CGException {

    sentinel.entering(((PlayerSentinel) sentinel).wasLastPieceMono);
    try {

      Boolean cond_1 = null;
      Object var1_2 = null;
      var1_2 = lastPiecePlayed.getShape();
      cond_1 = new Boolean(UTIL.equals(var1_2, new quotes.MONO()));
      if (cond_1.booleanValue()) 
        return new Boolean(true);
      else 
        return new Boolean(false);
    }
    finally {
      sentinel.leaving(((PlayerSentinel) sentinel).wasLastPieceMono);
    }
  }
// ***** VDMTOOLS END Name=wasLastPieceMono


// ***** VDMTOOLS START Name=initHand KEEP=NO
  public void initHand () throws CGException {

    sentinel.entering(((PlayerSentinel) sentinel).initHand);
    try {

      Piece newPiece = new Piece(color, new quotes.MONO());
      Integer i = new Integer(1);
      pieces = (Vector) UTIL.ConvertToList(UTIL.clone(new Vector()));
      while ( true){

        Boolean whCrtl_4 = null;
        Integer var2_6 = null;
        Vector unArg_7 = null;
        unArg_7 = newPiece.getAllShapes();
        var2_6 = new Integer(unArg_7.size());
        whCrtl_4 = new Boolean((i.intValue()) <= (var2_6.intValue()));
        if (whCrtl_4.booleanValue()) {

          Piece rhs_8 = null;
          Object arg_10 = null;
          Vector tmp_l_11 = null;
          tmp_l_11 = newPiece.getAllShapes();
          if ((1 <= i.intValue()) && (i.intValue() <= tmp_l_11.size())) 
            arg_10 = tmp_l_11.get(i.intValue() - 1);
          else 
            UTIL.RunTime("Run-Time Error:Illegal index");
          rhs_8 = new Piece(color, arg_10);
          newPiece = (Piece) UTIL.clone(rhs_8);
          pieces.add(newPiece);
          i = UTIL.NumberToInt(UTIL.clone(new Integer(i.intValue() + new Integer(1).intValue())));
        }
        else 
          break;
      }
    }
    finally {
      sentinel.leaving(((PlayerSentinel) sentinel).initHand);
    }
  }
// ***** VDMTOOLS END Name=initHand


// ***** VDMTOOLS START Name=getPlayingPiece KEEP=NO
  public Piece getPlayingPiece () throws CGException {

    sentinel.entering(((PlayerSentinel) sentinel).getPlayingPiece);
    try {
      return (Piece) currentPiece;
    }
    finally {
      sentinel.leaving(((PlayerSentinel) sentinel).getPlayingPiece);
    }
  }
// ***** VDMTOOLS END Name=getPlayingPiece


// ***** VDMTOOLS START Name=updateScore#1|Integer KEEP=NO
  public void updateScore (final Integer score_uto_uadd) throws CGException {

    sentinel.entering(((PlayerSentinel) sentinel).updateScore);
    try {
      score = UTIL.NumberToInt(UTIL.clone(new Integer(score.intValue() + score_uto_uadd.intValue())));
    }
    finally {
      sentinel.leaving(((PlayerSentinel) sentinel).updateScore);
    }
  }
// ***** VDMTOOLS END Name=updateScore#1|Integer


// ***** VDMTOOLS START Name=getScore KEEP=NO
  public Integer getScore () throws CGException {

    sentinel.entering(((PlayerSentinel) sentinel).getScore);
    try {
      return score;
    }
    finally {
      sentinel.leaving(((PlayerSentinel) sentinel).getScore);
    }
  }
// ***** VDMTOOLS END Name=getScore

}
;
